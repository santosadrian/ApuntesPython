----------> Funciones
La función 'len()' devuelve el número de caracteres del 'string' en particular. len('Hola') >>> | 4 len('') >>> 0
La función 'str()' concadena un número como 33 con una 'string' para por ejemplo hacer un "print('I am ' + str(29) + ' years old.' )" >>> I am 29 years old.
La función 'float()' así como el resto de funciones aqui expuestas pasan los valores de otros tipos de datos para obtener una string, un número, o un 'floating-point'.

----------> Flow control
Un programa es una serie de instrucciones, lo que no quiere decir que este se limite a repetirlas secuencialmente, el verdadero poder de la programación consiste en que segun las expresiones se evaluen, el programa puede decidir si saltarselas, repetirlas o elegir una de las varias instrucciones para ejecutar.

-----> Bolean: True o False
Mientras que los números, los 'floating-points', y los 'strings' tienen un número ilimitado de posibles valores, el tipo Booleano solo tiene dos.

----------> Operadores de comparación:
== igual que 		!= no igual a 		!= no igual a 		< menos que 		> más que 		<= menor que o igual a 		>= mayor que o igual a  	
 
----------> Operadores booleanos
Existen tres operadores booleanos ('and', 'or', 'not'). Son usados para comparar valores booleanos. Como los operadores de comparación, evaluan estas expresiones hasta llegar a su valor booleano, 'and' 'or' y 'not' siempre toman dos valores booleanos (o expresiones). Por eso son considerados operadores binarios.

-----> The and Operator's Truth Table
True  and  True		True
True  and  False  	False
False and  True  	False
False and  False 	False

-----> The or Operator's Truth Table
True   or  True		True
True   or  False	True
False  or  True		True
False  or  False	False

-----> The not Operator's Truth Table
not  True		False
not  False		True

-----> Elementos del control de flujo:
Los 'statements' de control de flujo a menudo empiezan con una parte llamada 'condition', y todo es seguido por un bloque de código llamada 'clause'.
'Conditions': las expresiones booleanas que hemos visto podrían ser todas consideradas 'conditions', que es lo mismo que 'expresions'. 'Condition' es mas un nombre específico en el contexto de las declaraciones del control de flujo. 'Conditions' siempre evaluan hacia un valor booleano, True or False. Una declaración de control de flujo decide que hacer basado en cual es su condición, 'True' o 'False'. Y casi todos los controles de flujo usan una 'condition'.

-----> Ejecución del programa:
En un programa simple python empieza a ejecutar código desde arriba hasta abajo, linea tras linea. En cambio no todos los programas se ejecutan simplemente yendo hacia abajo.

----------> Flow Control Statements
Los 'statements' representan las decisiones que tu programa va a obedecer.

-----> 'if Statements'
Es el tipo más común de 'flow control statement'. Y si el 'if statement clause' (el bloque que sigue al 'if') ejecutara el el 'if' si la 'condition' es 'True'. The 'clause' se salta si la condición es 'False'.
Los 'if statements' contienen lo siguiente:
1. La palabra 'if'.
2. Una 'condition' (una expresión que evalua si es 'True' o 'False')
3. Dos puntos (:).
4. Un bloque de código indentado (llamado el 'if clause').

-----> 'else Statements'
Un 'if clause' puede opcionalmente estar seguido por un 'else statement'. El 'else clause' se ejecuta cuando el 'if statement' es 'False'. Siempre consiste en lo mismo:
1. La palabra 'else'.
2. Dos puntos (:).
3. Un código de bloque indentado empezando en la siguiente línea llamado el 'else clause'.

-----> 'elif Statements'
Cuando sólo un 'if' o un 'else' va a ser ejecutado, quizás necesitas un caso donde quieras una de tantas 'clauses' para ejecutar. El 'elif statement' es un 'else if' statement que siempre sigue un 'if' u otro 'elif statement'. Provee otra condición que es comprobada solo si algunas de las previas condiciones que son checkeadas eran 'False'. Siempre es así:
1. La palabra 'elif'.
2. Una condición (que és una expresión que evalua 'True' o 'False').
3. Dos puntos (:).
4. Un bloque de código indentado en la siguiente línea (llamado el 'elif clause').

-----> 'while Loop Statements'
Con un 'while statement' puedes hacer que un bloque de código se ejecute hasta ell infinito. El código en un 'while clause' será ejecutado durante tanto tiempo como el 'while' statement condition es 'True'. 
1. La palabra 'while'.
2. Una 'condition' (una expresión que evalúa si es 'True' or 'False').
3. Un bloque de código indentado en la siguiente línea (llamado el 'while clause').

-----> 'break Statements'
Hay un atajo para parar la ejecución temprana de un programa que está dentro de un 'loop while'. Si la ejecución se encuentra con un 'breal statement', inmediatamente sale del 'while loop clause'. En código, un 'break statement' simplemente contiene la palabra 'break'.

-----> 'continue Statements'
Como los 'break statements', los 'continue statements' son usados dentro de los loops. Cuando la ejecución alcanza el 'continue statement', la ejecución del programa automáticamente salta atrás al principio del 'loop' y reevalúa la condición.

-----> 'for Loops and the range() Function'
El 'loop' while continua 'looping' mientras la condición sea 'True' (lo cuál es la razón para su nombre). Pero si quieres ejecutar un bloque de código solo un determinado número de veces? Puedes hacerlo con un 'for loop statement' y la función 'range()'. Se parece a esto: "for i in range(5):"" y siempre incluye lo siguiente:
1. La palabra 'for'.
2. Un nombre de variable.
3. La 'keyword' 'in'.
4. Una llamada al método 'range()'' con hasta tres dígitos pasados a el.
5. Dos puntos (:).
6. Un bloque de código indentado en la siguiente línea (llamado el 'for clause').


----------> 'Functions'
Python provee multitud de funciones 'built-in', pero tú también puedes crear las tuyas propias. Una función es como un mini programa dentro de un programa.

def saludo(): # el 'def statement' el cual define una función llamada saludo(). El código en el bloque que sigue el 'def statement' es el cuerpo de la función. Este código es ejecutado cuando la función es llamada, no cuando la función es definida.
    print('Hey!')
    print('Cómo estás hoy?')

saludo() # Esto es una 'function call', posiblemente necesite llevar números o argumentos dentro del paréntesis. Cuando la ejecución del programa llega a esta llamada saltará
>>> Hey! # a la línea en la cima en la función y empezará a ejecutar el código allí. Cuando alcance el final de la función, la ejecución retorna a la línea que ha llamado la 
>>> Cómo estás hoy? # función y continúa moviendose por el código como normalmente. Puedes llamar al a función repetidas veces.

-----> 'def Statements with Parameters'
Cuando llamas a una función 'print()' o 'len()', pasas valores, llamados argumentos en este contexto, escribie¡éndolos entre el paréntesis. También puedes definir tus propias funciones que acepten tus argumentos. Un ejemplo:

def saluda(nombre):
    print('Hola' + nombre)

saluda('Juan')

Nombre es el parámetro en esta función. Un parámetro es una variable en la que se almacena un argumento cuando se llama a la función. Algo a tener en cuenta es que los parámetros se olvidan una vez la función es devuelta. Esto es similar en como una variable de un programa es olvidada cuando el programa termina.

-----> 'Return Values and return Statements'
Cuando llamas a la funcion 'len()' y pasas un argumento como "hola" la función evalúa y llega al número 4, que es la lengitud de la cadena que has proporcionado. En general, el valor que evalúa una llamada a función es llamado el valor de retorno de la función.
Cuando una función es creada con el 'def statement', puedes elegir que valor retorna con un 'return statement'. Consiste en:
1. La palabra 'return'.
2. El valor o expresión que la función debería devolver.

Cuando una expresión es usada con un 'return statement', el valor del retorno es lo que evalua la expresión. Por ejemplo,el siguiente programa define una función que devuelve un 'string' diferente dependiendo de que número es pasado como argumento.

# coding=utf-8
import random

def obtenerRespuesta(numeroRespuesta):
    if numeroRespuesta == 1:
        return 'Es cierto'
    elif numeroRespuesta == 2:
        return 'Es decididamente así'
    elif numeroRespuesta == 3:
        return 'Sí'
    elif numeroRespuesta == 4:
        return 'Prueba de nuevo...'
    elif numeroRespuesta == 5:
        return 'Pregunta más tarde.'
    elif numeroRespuesta == 6:
        return 'Concéntrate y pregunta de nuevo.'
    elif numeroRespuesta == 7:
        return 'Mi respuesta es NO.'
    elif numeroRespuesta == 8:
        return 'No se yo'
    elif numeroRespuesta == 9:
        return 'Muy dudosamente.

r = random.randint(1,9)
suerte = obtenerRespuesta(r)
print(suerte)
